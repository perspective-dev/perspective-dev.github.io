window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "perspective", "modulename": "perspective", "kind": "module", "doc": "<p>The Python language bindings for <a href=\"https://perspective.finos.org\">Perspective</a>, a\nhigh performance data-visualization and analytics component for the web browser.</p>\n\n<p>A simple example which loads an <a href=\"https://arrow.apache.org/\">Apache Arrow</a> and\ncomputes a \"Group By\" operation, returning a new Arrow.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">perspective</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Server</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">new_local_client</span><span class=\"p\">()</span>\n<span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"n\">arrow_bytes_data</span><span class=\"p\">)</span>\n<span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(</span><span class=\"n\">group_by</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">&quot;CounterParty&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;Security&quot;</span><span class=\"p\">])</span>\n<span class=\"n\">arrow</span> <span class=\"o\">=</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">to_arrow</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>Perspective for Python uses the exact same C++ data engine used by the\n<a href=\"https://docs.rs/perspective-js/latest/perspective_js/\">WebAssembly version</a> and\n<a href=\"https://docs.rs/crate/perspective/latest\">Rust version</a>. The library consists\nof many of the same abstractions and API as in JavaScript, as well as\nPython-specific data loading support for <a href=\"https://numpy.org/\">NumPy</a>,\n<a href=\"https://pandas.pydata.org/\">Pandas</a> (and\n<a href=\"https://arrow.apache.org/\">Apache Arrow</a>, as in JavaScript).</p>\n\n<p>Additionally, <code>perspective-python</code> provides a session manager suitable for\nintegration into server systems such as\n<a href=\"https://www.tornadoweb.org/en/stable/websocket.html\">Tornado websockets</a>,\n<a href=\"https://docs.aiohttp.org/en/stable/web_quickstart.html#websockets\">AIOHTTP</a>, or\n<a href=\"https://www.starlette.io/websockets/\">Starlette</a>/<a href=\"https://fastapi.tiangolo.com/advanced/websockets/\">FastAPI</a>,\nwhich allows fully _virtual_ Perspective tables to be interacted with by\nmultiple <code>&lt;perspective-viewer&gt;</code> in a web browser. You can also interact with a\nPerspective table from python clients, and to that end client libraries are\nimplemented for both Tornado and AIOHTTP.</p>\n\n<p>As <code>&lt;perspective-viewer&gt;</code> will only consume the data necessary to render the\ncurrent screen, this runtime mode allows _ludicrously-sized_ datasets with\ninstant-load after they've been manifest on the server (at the expense of\nnetwork latency on UI interaction).</p>\n\n<p>The included <code>PerspectiveWidget</code> allows running such a viewer in\n<a href=\"https://jupyterlab.readthedocs.io/en/stable/\">JupyterLab</a> in either server or\nclient (via WebAssembly) mode, and the included <code>PerspectiveTornadoHandler</code>\nmakes it simple to extend a Tornado server with virtual Perspective support.</p>\n\n<p>The <code>perspective</code> module exports several tools:</p>\n\n<ul>\n<li><code>Server</code> the constructor for a new isntance of the Perspective data engine.</li>\n<li>The <code>perspective.widget</code> module exports <code>PerspectiveWidget</code>, the JupyterLab\nwidget for interactive visualization in a notebook cell.</li>\n<li>The <code>perspective.handlers</code> modules exports web frameworks handlers that\ninterface with a <code>perspective-client</code> in JavaScript.\n<ul>\n<li><code>perspective.handlers.tornado.PerspectiveTornadoHandler</code> for\n<a href=\"https://www.tornadoweb.org/\">Tornado</a></li>\n<li><code>perspective.handlers.starlette.PerspectiveStarletteHandler</code> for\n<a href=\"https://www.starlette.io/\">Starlette</a> and\n<a href=\"https://fastapi.tiangolo.com\">FastAPI</a></li>\n<li><code>perspective.handlers.aiohttp.PerspectiveAIOHTTPHandler</code> for\n<a href=\"https://docs.aiohttp.org\">AIOHTTP</a>,</li>\n</ul></li>\n</ul>\n\n<p>This user's guide provides an overview of the most common ways to use\nPerspective in Python: the <code>Table</code> API, the JupyterLab widget, and the Tornado\nhandler.</p>\n\n<p><a href=\"https://github.com/finos/perspective/tree/master/examples\">More Examples</a> are\navailable on GitHub.</p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p><code>perspective-python</code> contains full bindings to the Perspective API, a JupyterLab\nwidget, and a WebSocket handlers for several webserver libraries that allow you\nto host Perspective using server-side Python.</p>\n\n<p><code>perspective-python</code> can be installed from <a href=\"https://pypi.org\">PyPI</a> via <code>pip</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pip<span class=\"w\"> </span>install<span class=\"w\"> </span>perspective-python\n</code></pre>\n</div>\n\n<h2 id=\"quick-start\">Quick Start</h2>\n\n<p>A <code>Table</code> can be created from a dataset or a schema, the specifics of which are\n<a href=\"#loading-data-with-table\">discussed</a> in the JavaScript section of the user's\nguide. In Python, however, Perspective supports additional data types that are\ncommonly used when processing data:</p>\n\n<ul>\n<li><code>pandas.DataFrame</code></li>\n<li><code>polars.DataFrame</code></li>\n<li><code>bytes</code> (encoding an Apache Arrow)</li>\n<li><code>objects</code> (either extracting a repr or via reference)</li>\n<li><code>str</code> (encoding as a CSV)</li>\n</ul>\n\n<p>A <code>Table</code> is created in a similar fashion to its JavaScript equivalent:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">datetime</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">numpy</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">np</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">pandas</span><span class=\"w\"> </span><span class=\"k\">as</span><span class=\"w\"> </span><span class=\"nn\">pd</span>\n<span class=\"kn\">import</span><span class=\"w\"> </span><span class=\"nn\">perspective</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span>\n    <span class=\"s2\">&quot;int&quot;</span><span class=\"p\">:</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">arange</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">),</span>\n    <span class=\"s2\">&quot;float&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">i</span> <span class=\"o\">*</span> <span class=\"mf\">1.5</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)],</span>\n    <span class=\"s2\">&quot;bool&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"kc\">True</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)],</span>\n    <span class=\"s2\">&quot;date&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">date</span><span class=\"o\">.</span><span class=\"n\">today</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)],</span>\n    <span class=\"s2\">&quot;datetime&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)],</span>\n    <span class=\"s2\">&quot;string&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)]</span>\n<span class=\"p\">})</span>\n\n<span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">perspective</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"s2\">&quot;float&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Likewise, a <code>View</code> can be created via the <code>view()</code> method:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(</span><span class=\"n\">group_by</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;float&quot;</span><span class=\"p\">],</span> <span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s2\">&quot;bool&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;==&quot;</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">]])</span>\n<span class=\"n\">column_data</span> <span class=\"o\">=</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">to_columns</span><span class=\"p\">()</span>\n<span class=\"n\">row_data</span> <span class=\"o\">=</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">to_json</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<h4 id=\"pandas-and-polars-support\">Pandas and Polars Support</h4>\n\n<p>Perspective's <code>Table</code> can be constructed from <code>pandas.DataFrame</code> and\n<code>polars.DataFrame</code> objects. Internally, this just uses\n<a href=\"https://arrow.apache.org/docs/python/pandas.html\"><code>pyarrow::from_pandas</code></a>,\nwhich dictates behavior of this feature including type support.</p>\n\n<p>If the dataframe does not have an index set, an integer-typed column named\n<code>\"index\"</code> is created. If you want to preserve the indexing behavior of the\ndataframe passed into Perspective, simply create the <code>Table</code> with\n<code>index=\"index\"</code> as a keyword argument. This tells Perspective to once again\ntreat the index as a primary key:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s2\">&quot;datetime&quot;</span><span class=\"p\">)</span>\n<span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">perspective</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"s2\">&quot;index&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h4 id=\"time-zone-handling\">Time Zone Handling</h4>\n\n<p>When parsing <code>\"datetime\"</code> strings, times are assumed _local time_ unless an\nexplicit timezone offset is parsed. All <code>\"datetime\"</code> columns (regardless of\ninput time zone) are _output_ to the user as <code>datetime.datetime</code> objects in\n_local time_ according to the Python runtime.</p>\n\n<p>This behavior is consistent with Perspective's behavior in JavaScript. For more\ndetails, see this in-depth\n<a href=\"https://github.com/finos/perspective/pull/867\">explanation</a> of\n<code>perspective-python</code> semantics around time zone handling.</p>\n\n<h4 id=\"callbacks-and-events\">Callbacks and Events</h4>\n\n<p><code>perspective.Table</code> allows for <code>on_update</code> and <code>on_delete</code> callbacks to be\nset\u2014simply call <code>on_update</code> or <code>on_delete</code> with a reference to a function or a\nlambda without any parameters:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">update_callback</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Updated!&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the update callback</span>\n<span class=\"n\">on_update_id</span> <span class=\"o\">=</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">on_update</span><span class=\"p\">(</span><span class=\"n\">update_callback</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">delete_callback</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Deleted!&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set the delete callback</span>\n<span class=\"n\">on_delete_id</span> <span class=\"o\">=</span> <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">on_delete</span><span class=\"p\">(</span><span class=\"n\">delete_callback</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set a lambda as a callback</span>\n<span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">on_delete</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">&quot;Deleted x2!&quot;</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p>If the callback is a named reference to a function, it can be removed with\n<code>remove_update</code> or <code>remove_delete</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">remove_update</span><span class=\"p\">(</span><span class=\"n\">on_update_id</span><span class=\"p\">)</span>\n<span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">remove_delete</span><span class=\"p\">(</span><span class=\"n\">on_delete_id</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>Callbacks defined with a lambda function cannot be removed, as lambda functions\nhave no identifier.</p>\n\n<h3 id=\"hosting-table-and-view-instances\">Hosting <code>Table</code> and <code>View</code> instances</h3>\n\n<p><code>Server</code> \"hosts\" all <code>perspective.Table</code> and <code>perspective.View</code> instances\ncreated by its connected <code>Client</code>s. Hosted tables/views can have their methods\ncalled from other sources than the Python server, i.e. by a <code>perspective-viewer</code>\nrunning in a JavaScript client over the network, interfacing with\n<code>perspective-python</code> through the websocket API.</p>\n\n<p>The server has full control of all hosted <code>Table</code> and <code>View</code> instances, and can\ncall any public API method on hosted instances. This makes it extremely easy to\nstream data to a hosted <code>Table</code> using <code>.update()</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">perspective</span><span class=\"o\">.</span><span class=\"n\">Server</span><span class=\"p\">()</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">new_local_client</span><span class=\"p\">()</span>\n<span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;data_source&quot;</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"c1\"># updates continue to propagate automatically</span>\n    <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">new_data</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>The <code>name</code> provided is important, as it enables Perspective in JavaScript to\nlook up a <code>Table</code> and get a handle to it over the network. Otherwise, <code>name</code>\nwill be assigned randomlu and the <code>Client</code> must look this up with\n<code>CLient.get_hosted_table_names()</code></p>\n\n<h3 id=\"clientserver-replicated-mode\">Client/Server Replicated Mode</h3>\n\n<p>Using Tornado and\n<a href=\"python.md#perspectivetornadohandler\"><code>PerspectiveTornadoHandler</code></a>, as well as\n<code>Perspective</code>'s JavaScript library, we can set up \"distributed\" Perspective\ninstances that allows multiple browser <code>perspective-viewer</code> clients to read from\na common <code>perspective-python</code> server, as in the\n<a href=\"https://github.com/finos/perspective/tree/master/examples/python-tornado\">Tornado Example Project</a>.</p>\n\n<p>This architecture works by maintaining two <code>Tables</code>\u2014one on the server, and one\non the client that mirrors the server's <code>Table</code> automatically using <code>on_update</code>.\nAll updates to the table on the server are automatically applied to each client,\nwhich makes this architecture a natural fit for streaming dashboards and other\ndistributed use-cases. In conjunction with <a href=\"#multi-threading\">multithreading</a>,\ndistributed Perspective offers consistently high performance over large numbers\nof clients and large datasets.</p>\n\n<p>_*server.py*_</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">perspective</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">Server</span>\n<span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">perspective.hadnlers.tornado</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">PerspectiveTornadoHandler</span>\n\n<span class=\"c1\"># Create an instance of Server, and host a Table</span>\n<span class=\"n\">SERVER</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">()</span>\n<span class=\"n\">CLIENT</span> <span class=\"o\">=</span> <span class=\"n\">SERVER</span><span class=\"o\">.</span><span class=\"n\">new_local_client</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># The Table is exposed at `localhost:8888/websocket` with the name `data_source`</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;data_source&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">tornado</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">([</span>\n    <span class=\"c1\"># create a websocket endpoint that the client JavaScript can access</span>\n    <span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;/websocket&quot;</span><span class=\"p\">,</span> <span class=\"n\">PerspectiveTornadoHandler</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;perspective_server&quot;</span><span class=\"p\">:</span> <span class=\"n\">SERVER</span><span class=\"p\">})</span>\n<span class=\"p\">])</span>\n\n<span class=\"c1\"># Start the Tornado server</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"mi\">8888</span><span class=\"p\">)</span>\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">tornado</span><span class=\"o\">.</span><span class=\"n\">ioloop</span><span class=\"o\">.</span><span class=\"n\">IOLoop</span><span class=\"o\">.</span><span class=\"n\">current</span><span class=\"p\">()</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>Instead of calling <code>load(server_table)</code>, create a <code>View</code> using <code>server_table</code>\nand pass that into <code>viewer.load()</code>. This will automatically register an\n<code>on_update</code> callback that synchronizes state between the server and the client.</p>\n\n<p>_*index.html*_</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">perspective-viewer</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&quot;viewer&quot;</span> <span class=\"na\">editable</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">perspective-viewer</span><span class=\"p\">&gt;</span>\n\n<span class=\"p\">&lt;</span><span class=\"nt\">script</span> <span class=\"na\">type</span><span class=\"o\">=</span><span class=\"s\">&quot;module&quot;</span><span class=\"p\">&gt;</span>\n<span class=\"w\">    </span><span class=\"c1\">// Create a client that expects a Perspective server</span>\n<span class=\"w\">    </span><span class=\"c1\">// to accept connections at the specified URL.</span>\n<span class=\"w\">    </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">websocket</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"nx\">perspective</span><span class=\"p\">.</span><span class=\"nx\">websocket</span><span class=\"p\">(</span>\n<span class=\"w\">        </span><span class=\"s2\">&quot;ws://localhost:8888/websocket&quot;</span>\n<span class=\"w\">    </span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Get a handle to the Table on the server</span>\n<span class=\"w\">    </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">server_table</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"nx\">websocket</span><span class=\"p\">.</span><span class=\"nx\">open_table</span><span class=\"p\">(</span><span class=\"s2\">&quot;data_source_one&quot;</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Create a new view</span>\n<span class=\"w\">    </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">server_view</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"nx\">table</span><span class=\"p\">.</span><span class=\"nx\">view</span><span class=\"p\">();</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Create a Table on the client using `perspective.worker()`</span>\n<span class=\"w\">    </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">worker</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"nx\">perspective</span><span class=\"p\">.</span><span class=\"nx\">worker</span><span class=\"p\">();</span>\n<span class=\"w\">    </span><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">client_table</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"nx\">worker</span><span class=\"p\">.</span><span class=\"nx\">table</span><span class=\"p\">(</span><span class=\"nx\">view</span><span class=\"p\">);</span>\n\n<span class=\"w\">    </span><span class=\"c1\">// Load the client table in the `&lt;perspective-viewer&gt;`.</span>\n<span class=\"w\">    </span><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">&quot;viewer&quot;</span><span class=\"p\">).</span><span class=\"nx\">load</span><span class=\"p\">(</span><span class=\"nx\">client_table</span><span class=\"p\">);</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">script</span><span class=\"p\">&gt;</span>\n</code></pre>\n</div>\n\n<p>For a more complex example that offers distributed editing of the server\ndataset, see\n<a href=\"https://github.com/finos/perspective/blob/master/examples/python-tornado/client_server_editing.html\">client_server_editing.html</a>.</p>\n\n<p>We also provide examples for Starlette/FastAPI and AIOHTTP:</p>\n\n<ul>\n<li><a href=\"https://github.com/finos/perspective/tree/master/examples/python-starlette\">Starlette Example Project</a>.</li>\n<li><a href=\"https://github.com/finos/perspective/tree/master/examples/python-aiohttp\">AIOHTTP Example Project</a>.</li>\n</ul>\n\n<h3 id=\"server-only-mode\">Server-only Mode</h3>\n\n<p>The server setup is identical to <a href=\"#distributed-mode\">Distributed Mode</a> above,\nbut instead of creating a view, the client calls <code>load(server_table)</code>: In\nPython, use <code>Server</code> and <code>PerspectiveTornadoHandler</code> to create a websocket\nserver that exposes a <code>Table</code>. In this example, <code>table</code> is a proxy for the\n<code>Table</code> we created on the server. All API methods are available on _proxies_,\nthe.g.us calling <code>view()</code>, <code>schema()</code>, <code>update()</code> on <code>table</code> will pass those\noperations to the Python <code>Table</code>, execute the commands, and return the result\nback to Javascript.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"p\">&lt;</span><span class=\"nt\">perspective-viewer</span> <span class=\"na\">id</span><span class=\"o\">=</span><span class=\"s\">&quot;viewer&quot;</span> <span class=\"na\">editable</span><span class=\"p\">&gt;&lt;/</span><span class=\"nt\">perspective-viewer</span><span class=\"p\">&gt;</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">websocket</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">perspective</span><span class=\"p\">.</span><span class=\"nx\">websocket</span><span class=\"p\">(</span><span class=\"s2\">&quot;ws://localhost:8888/websocket&quot;</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">table</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"nx\">websocket</span><span class=\"p\">.</span><span class=\"nx\">open_table</span><span class=\"p\">(</span><span class=\"s2\">&quot;data_source&quot;</span><span class=\"p\">);</span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">getElementById</span><span class=\"p\">(</span><span class=\"s2\">&quot;viewer&quot;</span><span class=\"p\">).</span><span class=\"nx\">load</span><span class=\"p\">(</span><span class=\"nx\">table</span><span class=\"p\">);</span>\n</code></pre>\n</div>\n"}, {"fullname": "perspective.Server", "modulename": "perspective", "qualname": "Server", "kind": "class", "doc": "<p>An instance of a Perspective server. Each [<code>Server</code>] instance is separate,\nand does not share [<code>Table</code>] (or other) data with other [<code>Server</code>]s.</p>\n\n<h1 id=\"arguments\">Arguments</h1>\n\n<ul>\n<li><code>on_poll_request</code> A callback function which the <code>Server</code> will invoke when\nthere are updates that need to be flushed, after which you must\n_eventually_ call [<code>Server::poll</code>] (or else no updates will be processed).\nThis optimization allows batching updates, depending on context.</li>\n</ul>\n"}, {"fullname": "perspective.Server.new_local_client", "modulename": "perspective", "qualname": "Server.new_local_client", "kind": "function", "doc": "<p>Create a new [<code>Client</code>] instance bound to this [<code>Server</code>] directly.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Server.new_session", "modulename": "perspective", "qualname": "Server.new_session", "kind": "function", "doc": "<p>Create a new [<code>Session</code>] bound to this [<code>Server</code>].</p>\n\n<p>[<code>Server::new_session</code>] only needs to be called if you've implemented\na custom Perspective ['Client<code>]/[</code>Server`] transport.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">response_cb</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Server.poll", "modulename": "perspective", "qualname": "Server.poll", "kind": "function", "doc": "<p>Flush pending updates to this [<code>Server</code>], including notifications to\n[<code>View::on_update</code>] callbacks.</p>\n\n<p>[<code>Server::poll</code>] only needs to be called if you've implemented\na custom Perspective [<code>Server</code>] and provided the <code>on_poll_request</code>\nconstructor keyword argument.</p>\n\n<p>Calling [<code>Session::poll</code>] may result in the <code>send_response</code> parameter\nwhich was used to construct this (or other) [<code>Session</code>] to fire.\nWhenever a [<code>Session::handle_request</code>] method is invoked for a\n<code>perspective_server::Server</code>, at least one [<code>Session::poll</code>] should be\nscheduled to clear other clients message queues.</p>\n\n<p><code>poll()</code> _must_ be called after [<code>Table::update</code>] or [<code>Table::remove</code>]\nand <code>on_poll_request</code> is notified, or the changes will not be applied.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Client", "modulename": "perspective", "qualname": "Client", "kind": "class", "doc": "<p>An instance of a [<code>Client</code>] is a connection to a single [<code>Server</code>], whether\nlocally in-memory or remote over some transport like a WebSocket.</p>\n\n<p>[<code>Client</code>] and Perspective objects derived from it have _synchronous_ APIs,\nsuitable for use in a repl or script context where this is the _only_\n[<code>Client</code>] connected to its [<code>Server</code>]. If you want to\nintegrate with a Web framework or otherwise connect multiple clients,\nuse [<code>AsyncClient</code>].</p>\n"}, {"fullname": "perspective.Client.from_server", "modulename": "perspective", "qualname": "Client.from_server", "kind": "function", "doc": "<p>Create a new [<code>Client</code>] instance bound to a specific in-process\n[<code>Server</code>] (e.g. generally _not_ the global [<code>Server</code>]).</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">server</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Client.handle_response", "modulename": "perspective", "qualname": "Client.handle_response", "kind": "function", "doc": "<p>Handle a message from the external message queue.\n[<code>Client::handle_response</code>] is part of the low-level message-handling\nAPI necessary to implement new transports for a [<code>Client</code>]\nconnection to a local-or-remote [<code>Server</code>], and\ndoesn't generally need to be called directly by \"users\" of a\n[<code>Client</code>] once connected.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">response</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Client.table", "modulename": "perspective", "qualname": "Client.table", "kind": "function", "doc": "<p>Creates a new [<code>Table</code>] from either a _schema_ or _data_.</p>\n\n<p>The [<code>Client::table</code>] factory function can be initialized with either a\n_schema_ (see [<code>Table::schema</code>]), or data in one of these formats:</p>\n\n<ul>\n<li>Apache Arrow</li>\n<li>CSV</li>\n<li>JSON row-oriented</li>\n<li>JSON column-oriented</li>\n<li>NDJSON</li>\n</ul>\n\n<p>When instantiated with _data_, the schema is inferred from this data.\nWhile this is convenient, inferrence is sometimes imperfect e.g.\nwhen the input is empty, null or ambiguous. For these cases,\n[<code>Client::table</code>] can first be instantiated with a explicit schema.</p>\n\n<p>When instantiated with a _schema_, the resulting [<code>Table</code>] is empty but\nwith known column names and column types. When subsqeuently\npopulated with [<code>Table::update</code>], these columns will be _coerced_ to\nthe schema's type. This behavior can be useful when\n[<code>Client::table</code>]'s column type inferences doesn't work.</p>\n\n<p>The resulting [<code>Table</code>] is _virtual_, and invoking its methods\ndispatches events to the <code>perspective_server::Server</code> this\n[<code>Client</code>] connects to, where the data is stored and all calculation\noccurs.</p>\n\n<h1 id=\"arguments\">Arguments</h1>\n\n<ul>\n<li><code>arg</code> - Either _schema_ or initialization _data_.</li>\n<li><code>options</code> - Optional configuration which provides one of:\n<ul>\n<li><code>limit</code> - The max number of rows the resulting [<code>Table</code>] can\nstore.</li>\n<li><code>index</code> - The column name to use as an _index_ column. If this\n<code>Table</code> is being instantiated by _data_, this column name must be\npresent in the data.</li>\n<li><code>name</code> - The name of the table. This will be generated if it is\nnot provided.</li>\n<li><code>format</code> - The explicit format of the input data, can be one of\n<code>\"json\"</code>, <code>\"columns\"</code>, <code>\"csv\"</code> or <code>\"arrow\"</code>. This overrides\nlanguage-specific type dispatch behavior, which allows stringified\nand byte array alternative inputs.</li>\n</ul></li>\n</ul>\n\n<h1 id=\"python-examples\">Python Examples</h1>\n\n<p>Load a CSV from a <code>str</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s2\">&quot;x,y</span><span class=\"se\">\\n</span><span class=\"s2\">1,2</span><span class=\"se\">\\n</span><span class=\"s2\">3,4&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"nb\">input</span>, </span><span class=\"param\"><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Client.open_table", "modulename": "perspective", "qualname": "Client.open_table", "kind": "function", "doc": "<p>Opens a [<code>Table</code>] that is hosted on the <code>perspective_server::Server</code>\nthat is connected to this [<code>Client</code>].</p>\n\n<p>The <code>name</code> property of [<code>TableInitOptions</code>] is used to identify each\n[<code>Table</code>]. [<code>Table</code>] <code>name</code>s can be looked up for each [<code>Client</code>]\nvia [<code>Client::get_hosted_table_names</code>].</p>\n\n<h1 id=\"python-examples\">Python Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">table</span> <span class=\"o\">=</span>  <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">open_table</span><span class=\"p\">(</span><span class=\"s2\">&quot;table_one&quot;</span><span class=\"p\">);</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Client.get_hosted_table_names", "modulename": "perspective", "qualname": "Client.get_hosted_table_names", "kind": "function", "doc": "<p>Retrieves the names of all tables that this client has access to.</p>\n\n<p><code>name</code> is a string identifier unique to the [<code>Table</code>] (per [<code>Client</code>]),\nwhich can be used in conjunction with [<code>Client::open_table</code>] to get\na [<code>Table</code>] instance without the use of [<code>Client::table</code>]\nconstructor directly (e.g., one created by another [<code>Client</code>]).</p>\n\n<h1 id=\"python-examples\">Python Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">tables</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_hosted_table_names</span><span class=\"p\">();</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Client.on_hosted_tables_update", "modulename": "perspective", "qualname": "Client.on_hosted_tables_update", "kind": "function", "doc": "<p>Register a callback which is invoked whenever [<code>Client::table</code>] (on this\n[<code>Client</code>]) or [<code>Table::delete</code>] (on a [<code>Table</code>] belinging to this\n[<code>Client</code>]) are called.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">callback</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Client.remove_hosted_tables_update", "modulename": "perspective", "qualname": "Client.remove_hosted_tables_update", "kind": "function", "doc": "<p>Remove a callback previously registered via\n[<code>Client::on_hosted_tables_update</code>].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">callback_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Client.system_info", "modulename": "perspective", "qualname": "Client.system_info", "kind": "function", "doc": "<p>Provides the [<code>SystemInfo</code>] struct, implementation-specific metadata\nabout the [<code>perspective_server::Server</code>] runtime such as Memory and\nCPU usage.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Client.terminate", "modulename": "perspective", "qualname": "Client.terminate", "kind": "function", "doc": "<p>Terminates this [<code>Client</code>], cleaning up any [<code>View</code>] handles the\n[<code>Client</code>] has open as well as its callbacks.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Table", "modulename": "perspective", "qualname": "Table", "kind": "class", "doc": "<p>[<code>Table</code>] is Perspective's columnar data frame, analogous to a Pandas/Polars\n<code>DataFrame</code> or Apache Arrow, supporting append &amp; in-place updates, removal\nby index, and update notifications.</p>\n\n<p>A [<code>Table</code>] contains columns, each of which have a unique name, are strongly\nand consistently typed, and contains rows of data conforming to the column's\ntype. Each column in a [<code>Table</code>] must have the same number of rows, though\nnot every row must contain data; null-values are used to indicate missing\nvalues in the dataset. The schema of a [<code>Table</code>] is _immutable after\ncreation_, which means the column names and data types cannot be changed\nafter the [<code>Table</code>] has been created. Columns cannot be added or deleted\nafter creation either, but a [<code>View</code>] can be used to select an arbitrary set\nof columns from the [<code>Table</code>].</p>\n"}, {"fullname": "perspective.Table.get_index", "modulename": "perspective", "qualname": "Table.get_index", "kind": "function", "doc": "<p>Returns the name of the index column for the table.</p>\n\n<h1 id=\"python-examples\">Python Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">perspective</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s2\">&quot;x,y</span><span class=\"se\">\\n</span><span class=\"s2\">1,2</span><span class=\"se\">\\n</span><span class=\"s2\">3,4&quot;</span><span class=\"p\">,</span> <span class=\"n\">index</span><span class=\"o\">=</span><span class=\"s2\">&quot;x&quot;</span><span class=\"p\">);</span>\n<span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_index</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Table.get_client", "modulename": "perspective", "qualname": "Table.get_client", "kind": "function", "doc": "<p>Get a copy of the [<code>Client</code>] this [<code>Table</code>] came from.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Table.get_limit", "modulename": "perspective", "qualname": "Table.get_limit", "kind": "function", "doc": "<p>Returns the user-specified row limit for this table.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Table.get_name", "modulename": "perspective", "qualname": "Table.get_name", "kind": "function", "doc": "<p>Returns the user-specified name for this table, or the auto-generated\nname if a name was not specified when the table was created.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Table.clear", "modulename": "perspective", "qualname": "Table.clear", "kind": "function", "doc": "<p>Removes all the rows in the [<code>Table</code>], but preserves everything else\nincluding the schema, index, and any callbacks or registered\n[<code>View</code>] instances.</p>\n\n<p>Calling [<code>Table::clear</code>], like [<code>Table::update</code>] and [<code>Table::remove</code>],\nwill trigger an update event to any registered listeners via\n[<code>View::on_update</code>].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Table.columns", "modulename": "perspective", "qualname": "Table.columns", "kind": "function", "doc": "<p>Returns the column names of this [<code>Table</code>] in \"natural\" order (the\nordering implied by the input format).</p>\n\n<p># Python Examples</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">columns</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Table.delete", "modulename": "perspective", "qualname": "Table.delete", "kind": "function", "doc": "<p>Delete this [<code>Table</code>] and cleans up associated resources.</p>\n\n<p>[<code>Table</code>]s do not stop consuming resources or processing updates when\nthey are garbage collected in their host language - you must call\nthis method to reclaim these.</p>\n\n<h1 id=\"arguments\">Arguments</h1>\n\n<ul>\n<li><code>options</code> An options dictionary.\n<ul>\n<li><code>lazy</code> Whether to delete this [<code>Table</code>] _lazily_. When false (the\ndefault), the delete will occur immediately, assuming it has no\n[<code>View</code>] instances registered to it (which must be deleted first,\notherwise this method will throw an error). When true, the\n[<code>Table</code>] will only be marked for deltion once its [<code>View</code>]\ndependency count reaches 0.</li>\n</ul></li>\n</ul>\n\n<h1 id=\"python-examples\">Python Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s2\">&quot;x,y</span><span class=\"se\">\\n</span><span class=\"s2\">1,2</span><span class=\"se\">\\n</span><span class=\"s2\">3,4&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ...</span>\n\n<span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">lazy</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">lazy</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Table.make_port", "modulename": "perspective", "qualname": "Table.make_port", "kind": "function", "doc": "<p>Create a unique channel ID on this [<code>Table</code>], which allows\n<code>View::on_update</code> callback calls to be associated with the\n<code>Table::update</code> which caused them.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Table.on_delete", "modulename": "perspective", "qualname": "Table.on_delete", "kind": "function", "doc": "<p>Register a callback which is called exactly once, when this [<code>Table</code>] is\ndeleted with the [<code>Table::delete</code>] method.</p>\n\n<p>[<code>Table::on_delete</code>] resolves when the subscription message is sent, not\nwhen the _delete_ event occurs.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">callback</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Table.remove", "modulename": "perspective", "qualname": "Table.remove", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"nb\">input</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Table.remove_delete", "modulename": "perspective", "qualname": "Table.remove_delete", "kind": "function", "doc": "<p>Removes a listener with a given ID, as returned by a previous call to\n[<code>Table::on_delete</code>].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">callback_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Table.schema", "modulename": "perspective", "qualname": "Table.schema", "kind": "function", "doc": "<p>Returns a table's [<code>Schema</code>], a mapping of column names to column types.</p>\n\n<p>The mapping of a [<code>Table</code>]'s column names to data types is referred to\nas a [<code>Schema</code>]. Each column has a unique name and a data type, one\nof:</p>\n\n<ul>\n<li><code>\"boolean\"</code> - A boolean type</li>\n<li><code>\"date\"</code> - A timesonze-agnostic date type (month/day/year)</li>\n<li><code>\"datetime\"</code> - A millisecond-precision datetime type in the UTC\ntimezone</li>\n<li><code>\"float\"</code> - A 64 bit float</li>\n<li><code>\"integer\"</code> - A signed 32 bit integer (the integer type supported by\nJavaScript)</li>\n<li><code>\"string\"</code> - A <code>String</code> data type (encoded internally as a\n_dictionary_)</li>\n</ul>\n\n<p>Note that all [<code>Table</code>] columns are _nullable_, regardless of the data\ntype.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Table.validate_expressions", "modulename": "perspective", "qualname": "Table.validate_expressions", "kind": "function", "doc": "<p>Validates the given expressions.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">expression</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Table.view", "modulename": "perspective", "qualname": "Table.view", "kind": "function", "doc": "<p>Create a new [<code>View</code>] from this table with a specified\n[<code>ViewConfigUpdate</code>].</p>\n\n<p>See [<code>View</code>] struct.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">view</span> <span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">view</span><span class=\"p\">(</span>\n    <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;Sales&quot;</span><span class=\"p\">],</span>\n    <span class=\"n\">aggregates</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;Sales&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;sum&quot;</span><span class=\"p\">},</span>\n    <span class=\"n\">group_by</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;Region&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;State&quot;</span><span class=\"p\">],</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">config</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Table.size", "modulename": "perspective", "qualname": "Table.size", "kind": "function", "doc": "<p>Returns the number of rows in a [<code>Table</code>].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Table.replace", "modulename": "perspective", "qualname": "Table.replace", "kind": "function", "doc": "<p>Removes all the rows in the [<code>Table</code>], but preserves everything else\nincluding the schema, index, and any callbacks or registered\n[<code>View</code>] instances.</p>\n\n<p>Calling [<code>Table::clear</code>], like [<code>Table::update</code>] and [<code>Table::remove</code>],\nwill trigger an update event to any registered listeners via\n[<code>View::on_update</code>].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"nb\">input</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.Table.update", "modulename": "perspective", "qualname": "Table.update", "kind": "function", "doc": "<p>Updates the rows of this table and any derived [<code>View</code>] instances.</p>\n\n<p>Calling [<code>Table::update</code>] will trigger the [<code>View::on_update</code>] callbacks\nregister to derived [<code>View</code>], and the call itself will not resolve until\n_all_ derived [<code>View</code>]'s are notified.</p>\n\n<p>When updating a [<code>Table</code>] with an <code>index</code>, [<code>Table::update</code>] supports\npartial updates, by omitting columns from the update data.</p>\n\n<h1 id=\"arguments\">Arguments</h1>\n\n<ul>\n<li><code>input</code> - The input data for this [<code>Table</code>]. The schema of a [<code>Table</code>]\nis immutable after creation, so this method cannot be called with a\nschema.</li>\n<li><code>options</code> - Options for this update step - see\n[<code>perspective_client::UpdateOptions</code>].\n```</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"nb\">input</span>, </span><span class=\"param\"><span class=\"n\">port_id</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View", "modulename": "perspective", "qualname": "View", "kind": "class", "doc": "<p>The [<code>View</code>] struct is Perspective's query and serialization interface. It\nrepresents a query on the <code>Table</code>'s dataset and is always created from an\nexisting <code>Table</code> instance via the [<code>Table::view</code>] method.</p>\n\n<p>[<code>View</code>]s are immutable with respect to the arguments provided to the\n[<code>Table::view</code>] method; to change these parameters, you must create a new\n[<code>View</code>] on the same [<code>Table</code>]. However, each [<code>View</code>] is _live_ with\nrespect to the [<code>Table</code>]'s data, and will (within a conflation window)\nupdate with the latest state as its parent [<code>Table</code>] updates, including\nincrementally recalculating all aggregates, pivots, filters, etc. [<code>View</code>]\nquery parameters are composable, in that each parameter works independently\n_and_ in conjunction with each other, and there is no limit to the number of\npivots, filters, etc. which can be applied.</p>\n\n<p>To construct a [<code>View</code>], call the [<code>Table::view</code>] factory method. A\n[<code>Table</code>] can have as many [<code>View</code>]s associated with it as you need -\nPerspective conserves memory by relying on a single [<code>Table</code>] to power\nmultiple [<code>View</code>]s concurrently.</p>\n"}, {"fullname": "perspective.View.column_paths", "modulename": "perspective", "qualname": "View.column_paths", "kind": "function", "doc": "<p>Returns an array of strings containing the column paths of the [<code>View</code>]\nwithout any of the source columns.</p>\n\n<p>A column path shows the columns that a given cell belongs to after\npivots are applied.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.to_columns_string", "modulename": "perspective", "qualname": "View.to_columns_string", "kind": "function", "doc": "<p>Renders this [<code>View</code>] as a column-oriented JSON string. Useful if you\nwant to save additional round trip serialize/deserialize cycles.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.to_json_string", "modulename": "perspective", "qualname": "View.to_json_string", "kind": "function", "doc": "<p>Renders this <code>View</code> as a row-oriented JSON string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.to_ndjson", "modulename": "perspective", "qualname": "View.to_ndjson", "kind": "function", "doc": "<p>Renders this [<code>View</code>] as an <a href=\"https://github.com/ndjson/ndjson-spec\">NDJSON</a>\nformatted <code>String</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.to_records", "modulename": "perspective", "qualname": "View.to_records", "kind": "function", "doc": "<p>Renders this [<code>View</code>] as a row-oriented Python <code>list</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.to_json", "modulename": "perspective", "qualname": "View.to_json", "kind": "function", "doc": "<p>Renders this [<code>View</code>] as a row-oriented Python <code>list</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.to_columns", "modulename": "perspective", "qualname": "View.to_columns", "kind": "function", "doc": "<p>Renders this [<code>View</code>] as a column-oriented Python <code>dict</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.to_csv", "modulename": "perspective", "qualname": "View.to_csv", "kind": "function", "doc": "<p>Renders this [<code>View</code>] as a CSV <code>String</code> in a standard format.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.to_dataframe", "modulename": "perspective", "qualname": "View.to_dataframe", "kind": "function", "doc": "<p>Renders this [<code>View</code>] as a <code>pandas.DataFrame</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.to_pandas", "modulename": "perspective", "qualname": "View.to_pandas", "kind": "function", "doc": "<p>Renders this [<code>View</code>] as a <code>pandas.DataFrame</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.to_polars", "modulename": "perspective", "qualname": "View.to_polars", "kind": "function", "doc": "<p>Renders this [<code>View</code>] as a <code>polars.DataFrame</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.to_arrow", "modulename": "perspective", "qualname": "View.to_arrow", "kind": "function", "doc": "<p>Renders this [<code>View</code>] as the Apache Arrow data format.</p>\n\n<h1 id=\"arguments\">Arguments</h1>\n\n<ul>\n<li><code>window</code> - a [<code>ViewWindow</code>]</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">window</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.delete", "modulename": "perspective", "qualname": "View.delete", "kind": "function", "doc": "<p>Delete this [<code>View</code>] and clean up all resources associated with it.\n[<code>View</code>] objects do not stop consuming resources or processing\nupdates when they are garbage collected - you must call this method\nto reclaim these.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.expand", "modulename": "perspective", "qualname": "View.expand", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.collapse", "modulename": "perspective", "qualname": "View.collapse", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">index</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.dimensions", "modulename": "perspective", "qualname": "View.dimensions", "kind": "function", "doc": "<p>Returns this [<code>View</code>]'s _dimensions_, row and column count, as well as\nthose of the [<code>crate::Table</code>] from which it was derived.</p>\n\n<ul>\n<li><code>num_table_rows</code> - The number of rows in the underlying\n[<code>crate::Table</code>].</li>\n<li><code>num_table_columns</code> - The number of columns in the underlying\n[<code>crate::Table</code>] (including the <code>index</code> column if this\n[<code>crate::Table</code>] was constructed with one).</li>\n<li><code>num_view_rows</code> - The number of rows in this [<code>View</code>]. If this\n[<code>View</code>] has a <code>group_by</code> clause, <code>num_view_rows</code> will also include\naggregated rows.</li>\n<li><code>num_view_columns</code> - The number of columns in this [<code>View</code>]. If this\n[<code>View</code>] has a <code>split_by</code> clause, <code>num_view_columns</code> will include all\n_column paths_, e.g. the number of <code>columns</code> clause times the number\nof <code>split_by</code> groups.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.expression_schema", "modulename": "perspective", "qualname": "View.expression_schema", "kind": "function", "doc": "<p>The expression schema of this [<code>View</code>], which contains only the\nexpressions created on this [<code>View</code>]. See [<code>View::schema</code>] for\ndetails.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.get_config", "modulename": "perspective", "qualname": "View.get_config", "kind": "function", "doc": "<p>A copy of the [<code>ViewConfig</code>] object passed to the [<code>Table::view</code>] method\nwhich created this [<code>View</code>].</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.get_min_max", "modulename": "perspective", "qualname": "View.get_min_max", "kind": "function", "doc": "<p>Calculates the [min, max] of the leaf nodes of a column <code>column_name</code>.</p>\n\n<h1 id=\"returns\">Returns</h1>\n\n<p>A tuple of [min, max], whose types are column and aggregate dependent.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">column_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.num_rows", "modulename": "perspective", "qualname": "View.num_rows", "kind": "function", "doc": "<p>The number of aggregated rows in this [<code>View</code>]. This is affected by the\n\"group_by\" configuration parameter supplied to this view's contructor.</p>\n\n<h1 id=\"returns\">Returns</h1>\n\n<p>The number of aggregated rows.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.schema", "modulename": "perspective", "qualname": "View.schema", "kind": "function", "doc": "<p>The schema of this [<code>View</code>].</p>\n\n<p>The [<code>View</code>] schema differs from the <code>schema</code> returned by\n[<code>Table::schema</code>]; it may have different column names due to\n<code>expressions</code> or <code>columns</code> configs, or it maye have _different\ncolumn types_ due to the application og <code>group_by</code> and <code>aggregates</code>\nconfig. You can think of [<code>Table::schema</code>] as the _input_ schema and\n[<code>View::schema</code>] as the _output_ schema of a Perspective pipeline.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.on_delete", "modulename": "perspective", "qualname": "View.on_delete", "kind": "function", "doc": "<p>Register a callback with this [<code>View</code>]. Whenever the [<code>View</code>] is\ndeleted, this callback will be invoked.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">callback</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.remove_delete", "modulename": "perspective", "qualname": "View.remove_delete", "kind": "function", "doc": "<p>Unregister a previously registered [<code>View::on_delete</code>] callback.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">callback_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.on_update", "modulename": "perspective", "qualname": "View.on_update", "kind": "function", "doc": "<p>Register a callback with this [<code>View</code>]. Whenever the view's underlying\ntable emits an update, this callback will be invoked with an object\ncontaining <code>port_id</code>, indicating which port the update fired on, and\noptionally <code>delta</code>, which is the new data that was updated for each\ncell or each row.</p>\n\n<h1 id=\"arguments\">Arguments</h1>\n\n<ul>\n<li><code>on_update</code> - A callback function invoked on update, which receives an\nobject with two keys: <code>port_id</code>, indicating which port the update was\ntriggered on, and <code>delta</code>, whose value is dependent on the mode\nparameter.</li>\n<li><code>options</code> - If this is provided as <code>OnUpdateOptions { mode:\nSome(OnUpdateMode::Row) }</code>, then <code>delta</code> is an Arrow of the updated\nrows. Otherwise <code>delta</code> will be [<code>Option::None</code>].</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">callback</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.View.remove_update", "modulename": "perspective", "qualname": "View.remove_update", "kind": "function", "doc": "<p>Unregister a previously registered update callback with this [<code>View</code>].</p>\n\n<h1 id=\"arguments\">Arguments</h1>\n\n<ul>\n<li><code>id</code> - A callback <code>id</code> as returned by a recipricol call to\n[<code>View::on_update</code>].</li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">callback</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"o\">|</span><span class=\"n\">_</span><span class=\"o\">|</span><span class=\"w\"> </span><span class=\"k\">async</span><span class=\"w\"> </span><span class=\"p\">{</span><span class=\"w\"> </span><span class=\"fm\">print!</span><span class=\"p\">(</span><span class=\"s\">&quot;Updated!&quot;</span><span class=\"p\">)</span><span class=\"w\"> </span><span class=\"p\">};</span>\n<span class=\"kd\">let</span><span class=\"w\"> </span><span class=\"n\">cid</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"n\">view</span><span class=\"p\">.</span><span class=\"n\">on_update</span><span class=\"p\">(</span><span class=\"n\">callback</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"n\">OnUpdateOptions</span><span class=\"p\">::</span><span class=\"n\">default</span><span class=\"p\">()).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span>\n<span class=\"n\">view</span><span class=\"p\">.</span><span class=\"n\">remove_update</span><span class=\"p\">(</span><span class=\"n\">cid</span><span class=\"p\">).</span><span class=\"k\">await</span><span class=\"o\">?</span><span class=\"p\">;</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">callback_id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.PerspectiveError", "modulename": "perspective", "qualname": "PerspectiveError", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;perspective.PyPerspectiveError&#x27;&gt;"}, {"fullname": "perspective.ProxySession", "modulename": "perspective", "qualname": "ProxySession", "kind": "class", "doc": "<p></p>\n"}, {"fullname": "perspective.ProxySession.handle_request", "modulename": "perspective", "qualname": "ProxySession.handle_request", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.ProxySession.handle_request_async", "modulename": "perspective", "qualname": "ProxySession.handle_request_async", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.ProxySession.close", "modulename": "perspective", "qualname": "ProxySession.close", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.num_cpus", "modulename": "perspective", "qualname": "num_cpus", "kind": "function", "doc": "<p>Returns the number of threads the internal threadpool will use.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.set_num_cpus", "modulename": "perspective", "qualname": "set_num_cpus", "kind": "function", "doc": "<p>Set the number of threads the internal threadpool will use. Can also be set\nwith <code>NUM_OMP_THREADS</code> environment variable.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_cpus</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.system_info", "modulename": "perspective", "qualname": "system_info", "kind": "function", "doc": "<p>Provides the [<code>SystemInfo</code>] struct, implementation-specific metadata\nabout the [<code>perspective_server::Server</code>] runtime such as Memory and\nCPU usage.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">/</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.handlers.aiohttp", "modulename": "perspective.handlers.aiohttp", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "perspective.handlers.aiohttp.PerspectiveAIOHTTPHandler", "modulename": "perspective.handlers.aiohttp", "qualname": "PerspectiveAIOHTTPHandler", "kind": "class", "doc": "<p><code>PerspectiveAIOHTTPHandler</code> is a drop-in implementation of Perspective.</p>\n\n<p>Use it inside AIOHTTP routing to create a server-side Perspective that is\nready to receive websocket messages from the front-end <code>perspective-viewer</code>.</p>\n\n<p>The Perspective client and server will automatically keep the Websocket\nalive without timing out.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">async</span> <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">websocket_handler</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>   <span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">PerspectiveAIOHTTPHandler</span><span class=\"p\">(</span><span class=\"n\">perspective_server</span><span class=\"o\">=</span><span class=\"n\">server</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">=</span><span class=\"n\">request</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>   <span class=\"k\">await</span> <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_get</span><span class=\"p\">(</span><span class=\"s2\">&quot;/websocket&quot;</span><span class=\"p\">,</span> <span class=\"n\">websocket_handler</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "perspective.handlers.aiohttp.PerspectiveAIOHTTPHandler.__init__", "modulename": "perspective.handlers.aiohttp", "qualname": "PerspectiveAIOHTTPHandler.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "perspective.handlers.aiohttp.PerspectiveAIOHTTPHandler.server", "modulename": "perspective.handlers.aiohttp", "qualname": "PerspectiveAIOHTTPHandler.server", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "perspective.handlers.aiohttp.PerspectiveAIOHTTPHandler.run", "modulename": "perspective.handlers.aiohttp", "qualname": "PerspectiveAIOHTTPHandler.run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">web_ws</span><span class=\"o\">.</span><span class=\"n\">WebSocketResponse</span>:</span></span>", "funcdef": "async def"}, {"fullname": "perspective.handlers.starlette", "modulename": "perspective.handlers.starlette", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "perspective.handlers.starlette.PerspectiveStarletteHandler", "modulename": "perspective.handlers.starlette", "qualname": "PerspectiveStarletteHandler", "kind": "class", "doc": "<p><code>PerspectiveStarletteHandler</code> is a drop-in implementation of Perspective.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s2\">&quot;superstore.csv&quot;</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;data_source_one&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">FastAPI</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">async</span> <span class=\"k\">def</span><span class=\"w\"> </span><span class=\"nf\">endpoint</span><span class=\"p\">(</span><span class=\"n\">websocket</span><span class=\"p\">:</span> <span class=\"n\">Websocket</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"n\">PerspectiveStarletteHandler</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">,</span> <span class=\"n\">websocket</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"k\">await</span> <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"gp\">... </span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">add_api_websocket_route</span><span class=\"p\">(</span><span class=\"s1\">&#39;/websocket&#39;</span><span class=\"p\">,</span> <span class=\"n\">endpoint</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "perspective.handlers.starlette.PerspectiveStarletteHandler.__init__", "modulename": "perspective.handlers.starlette", "qualname": "PerspectiveStarletteHandler.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "perspective.handlers.starlette.PerspectiveStarletteHandler.run", "modulename": "perspective.handlers.starlette", "qualname": "PerspectiveStarletteHandler.run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "perspective.handlers.tornado", "modulename": "perspective.handlers.tornado", "kind": "module", "doc": "<p>Perspective ships with a pre-built Tornado handler that makes integration with\n<code>tornado.websockets</code> extremely easy. This allows you to run an instance of\n<code>Perspective</code> on a server using Python, open a websocket to a <code>Table</code>, and\naccess the <code>Table</code> in JavaScript and through <code>&lt;perspective-viewer&gt;</code>. All\ninstructions sent to the <code>Table</code> are processed in Python, which executes the\ncommands, and returns its output through the websocket back to Javascript.</p>\n\n<h3 id=\"python-setup\">Python setup</h3>\n\n<p>To use the handler, we need to first have a <code>Server</code>, a <code>Client</code> and an instance\nof a <code>Table</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">SERVER</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">()</span>\n<span class=\"n\">CLIENT</span> <span class=\"o\">=</span> <span class=\"n\">SERVER</span><span class=\"o\">.</span><span class=\"n\">new_local_client</span><span class=\"p\">()</span>\n</code></pre>\n</div>\n\n<p>Once the server has been created, create a <code>Table</code> instance with a name. The\nname that you host the table under is important \u2014 it acts as a unique accessor\non the JavaScript side, which will look for a Table hosted at the websocket with\nthe name you specify.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">TABLE</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;data_source_one&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p>After the server and table setup is complete, create a websocket endpoint and\nprovide it a reference to <code>PerspectiveTornadoHandler</code>. You must provide the\nconfiguration object in the route tuple, and it must contain\n<code>\"perspective_server\"</code>, which is a reference to the <code>Server</code> you just created.</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">perspective.handlers.tornado</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">PerspectiveTornadoHandler</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">tornado</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">([</span>\n\n    <span class=\"c1\"># ... other handlers ...</span>\n\n    <span class=\"c1\"># Create a websocket endpoint that the client JavaScript can access</span>\n    <span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;/websocket&quot;</span><span class=\"p\">,</span> <span class=\"n\">PerspectiveTornadoHandler</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">&quot;perspective_server&quot;</span><span class=\"p\">:</span> <span class=\"n\">SERVER</span><span class=\"p\">,</span> <span class=\"s2\">&quot;check_origin&quot;</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">})</span>\n<span class=\"p\">])</span>\n</code></pre>\n</div>\n\n<p>Optionally, the configuration object can also include <code>check_origin</code>, a boolean\nthat determines whether the websocket accepts requests from origins other than\nwhere the server is hosted. See\n<a href=\"https://www.tornadoweb.org/en/stable/websocket.html#tornado.websocket.WebSocketHandler.check_origin\">Tornado docs</a>\nfor more details.</p>\n\n<h3 id=\"javascript-setup\">JavaScript setup</h3>\n\n<p>Once the server is up and running, you can access the Table you just hosted\nusing <code>perspective.websocket</code> and <code>open_table()</code>. First, create a client that\nexpects a Perspective server to accept connections at the specified URL:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">websocket</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"nx\">perspective</span><span class=\"p\">.</span><span class=\"nx\">websocket</span><span class=\"p\">(</span><span class=\"s2\">&quot;ws://localhost:8888/websocket&quot;</span><span class=\"p\">);</span>\n</code></pre>\n</div>\n\n<p>Next open the <code>Table</code> we created on the server by name:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kd\">const</span><span class=\"w\"> </span><span class=\"nx\">table</span><span class=\"w\"> </span><span class=\"o\">=</span><span class=\"w\"> </span><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"nx\">websocket</span><span class=\"p\">.</span><span class=\"nx\">open_table</span><span class=\"p\">(</span><span class=\"s2\">&quot;data_source_one&quot;</span><span class=\"p\">);</span>\n</code></pre>\n</div>\n\n<p><code>table</code> is a proxy for the <code>Table</code> we created on the server. All operations that\nare possible through the JavaScript API are possible on the Python API as well,\nthus calling <code>view()</code>, <code>schema()</code>, <code>update()</code> etc. on <code>const table</code> will pass\nthose operations to the Python <code>Table</code>, execute the commands, and return the\nresult back to JavaScript. Similarly, providing this <code>table</code> to a\n<code>&lt;perspective-viewer&gt;</code> instance will allow virtual rendering:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">await</span><span class=\"w\"> </span><span class=\"nx\">viewer</span><span class=\"p\">.</span><span class=\"nx\">load</span><span class=\"p\">(</span><span class=\"nx\">table</span><span class=\"p\">);</span>\n</code></pre>\n</div>\n\n<p><code>perspective.websocket</code> expects a Websocket URL where it will send instructions.\nWhen <code>open_table</code> is called, the name to a hosted Table is passed through, and a\nrequest is sent through the socket to fetch the Table. No actual <code>Table</code>\ninstance is passed inbetween the runtimes; all instructions are proxied through\nwebsockets.</p>\n\n<p>This provides for great flexibility \u2014 while <code>Perspective.js</code> is full of\nfeatures, browser WebAssembly runtimes currently have some performance\nrestrictions on memory and CPU feature utilization, and the architecture in\ngeneral suffers when the dataset itself is too large to download to the client\nin full.</p>\n\n<p>The Python runtime does not suffer from memory limitations, utilizes Apache\nArrow internal threadpools for threading and parallel processing, and generates\narchitecture optimized code, which currently makes it more suitable as a\nserver-side runtime than <code>node.js</code>.</p>\n"}, {"fullname": "perspective.handlers.tornado.PerspectiveTornadoHandler", "modulename": "perspective.handlers.tornado", "qualname": "PerspectiveTornadoHandler", "kind": "class", "doc": "<p><code>PerspectiveTornadoHandler</code> is a <code>perspective.Server</code> API as a <code>tornado</code>\nwebsocket handler.</p>\n\n<p>Use it inside <code>tornado</code> routing to create a <code>perspective.Server</code> that can\nconnect to a JavaScript (Wasm) <code>Client</code>, providing a virtual interface to\nthe <code>Server</code>'s resources for e.g. <code>&lt;perspective-viewer&gt;</code>.</p>\n\n<p>You may need to increase the <code>websocket_max_message_size</code> kwarg\nto the <code>tornado.web.Application</code> constructor, as well as provide the\n<code>max_buffer_size</code> optional arg, for large datasets.</p>\n\n<h1 id=\"arguments\">Arguments</h1>\n\n<ul>\n<li><code>loop</code>: An optional <code>IOLoop</code> instance to use for scheduling IO calls,\ndefaults to <code>IOLoop.current()</code>.</li>\n<li><code>executor</code>: An optional executor for scheduling <code>perspective.Server</code>\nmessage processing calls from websocket <code>Client</code>s.</li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">psp</span><span class=\"o\">.</span><span class=\"n\">Server</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">new_local_client</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_csv</span><span class=\"p\">(</span><span class=\"s2\">&quot;superstore.csv&quot;</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">&quot;data_source_one&quot;</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">tornado</span><span class=\"o\">.</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">([</span>\n<span class=\"gp\">... </span>    <span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;/&quot;</span><span class=\"p\">,</span> <span class=\"n\">MainHandler</span><span class=\"p\">),</span>\n<span class=\"gp\">... </span>    <span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s2\">&quot;/websocket&quot;</span><span class=\"p\">,</span> <span class=\"n\">PerspectiveTornadoHandler</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;perspective_server&quot;</span><span class=\"p\">:</span> <span class=\"n\">server</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"p\">})</span>\n<span class=\"gp\">... </span><span class=\"p\">])</span>\n</code></pre>\n</div>\n", "bases": "tornado.websocket.WebSocketHandler"}, {"fullname": "perspective.handlers.tornado.PerspectiveTornadoHandler.check_origin", "modulename": "perspective.handlers.tornado", "qualname": "PerspectiveTornadoHandler.check_origin", "kind": "function", "doc": "<p>Override to enable support for allowing alternate origins.</p>\n\n<p>The <code>origin</code> argument is the value of the <code>Origin</code> HTTP\nheader, the url responsible for initiating this request.  This\nmethod is not called for clients that do not send this header;\nsuch requests are always allowed (because all browsers that\nimplement WebSockets support this header, and non-browser\nclients do not have the same cross-site security concerns).</p>\n\n<p>Should return <code>True</code> to accept the request or <code>False</code> to\nreject it. By default, rejects all requests with an origin on\na host other than this one.</p>\n\n<p>This is a security protection against cross site scripting attacks on\nbrowsers, since WebSockets are allowed to bypass the usual same-origin\npolicies and don't use CORS headers.</p>\n\n<div class=\"alert warning\">\n\n<p>This is an important security measure; don't disable it\nwithout understanding the security implications. In\nparticular, if your authentication is cookie-based, you\nmust either restrict the origins allowed by\n<code>check_origin()</code> or implement your own XSRF-like\nprotection for websocket connections. See <a href=\"https://www.christian-schneider.net/CrossSiteWebSocketHijacking.html\">these\n</a>\n<a href=\"https://devcenter.heroku.com/articles/websocket-security\">articles\n</a>\nfor more.</p>\n\n</div>\n\n<p>To accept all cross-origin traffic (which was the default prior to\nTornado 4.0), simply override this method to always return <code>True</code>::</p>\n\n<pre><code>def check_origin(self, origin):\n    return True\n</code></pre>\n\n<p>To allow connections from any subdomain of your site, you might\ndo something like::</p>\n\n<pre><code>def check_origin(self, origin):\n    parsed_origin = urllib.parse.urlparse(origin)\n    return parsed_origin.netloc.endswith(\".mydomain.com\")\n</code></pre>\n\n<p><em>New in version 4.0.</em></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">origin</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.handlers.tornado.PerspectiveTornadoHandler.initialize", "modulename": "perspective.handlers.tornado", "qualname": "PerspectiveTornadoHandler.initialize", "kind": "function", "doc": "<p>Hook for subclass initialization. Called for each request.</p>\n\n<p>A dictionary passed as the third argument of a <code>URLSpec</code> will be\nsupplied as keyword arguments to <code>initialize()</code>.</p>\n\n<p>Example::</p>\n\n<pre><code>class ProfileHandler(RequestHandler):\n    def initialize(self, database):\n        self.database = database\n\n    def get(self, username):\n        ...\n\napp = Application([\n    (r'/user/(.*)', ProfileHandler, dict(database=database)),\n    ])\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">perspective_server</span><span class=\"o\">=&lt;</span><span class=\"n\">perspective</span><span class=\"o\">.</span><span class=\"n\">Server</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">executor</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">max_buffer_size</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.handlers.tornado.PerspectiveTornadoHandler.open", "modulename": "perspective.handlers.tornado", "qualname": "PerspectiveTornadoHandler.open", "kind": "function", "doc": "<p>Invoked when a new WebSocket is opened.</p>\n\n<p>The arguments to <code>open</code> are extracted from the <code>tornado.web.URLSpec</code>\nregular expression, just like the arguments to\n<code>tornado.web.RequestHandler.get</code>.</p>\n\n<p><code>open</code> may be a coroutine. <code>on_message</code> will not be called until\n<code>open</code> has returned.</p>\n\n<p><em>Changed in version 5.1:</em>\n<code>open</code> may be a coroutine.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.handlers.tornado.PerspectiveTornadoHandler.on_close", "modulename": "perspective.handlers.tornado", "qualname": "PerspectiveTornadoHandler.on_close", "kind": "function", "doc": "<p>Invoked when the WebSocket is closed.</p>\n\n<p>If the connection was closed cleanly and a status code or reason\nphrase was supplied, these values will be available as the attributes\n<code>self.close_code</code> and <code>self.close_reason</code>.</p>\n\n<p><em>Changed in version 4.0:</em>\nAdded <code>close_code</code> and <code>close_reason</code> attributes.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "perspective.handlers.tornado.PerspectiveTornadoHandler.on_message", "modulename": "perspective.handlers.tornado", "qualname": "PerspectiveTornadoHandler.on_message", "kind": "function", "doc": "<p>Handle incoming messages on the WebSocket</p>\n\n<p>This method must be overridden.</p>\n\n<p><em>Changed in version 4.5:</em>\n<code>on_message</code> can be a coroutine.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">msg</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.widget", "modulename": "perspective.widget", "kind": "module", "doc": "<p><code>PerspectiveWidget</code> is a JupyterLab widget that implements the same API as\n<code>&lt;perspective-viewer&gt;</code>, allowing for fast, intuitive\ntransformations/visualizations of various data formats within JupyterLab.</p>\n\n<p><code>PerspectiveWidget</code> is compatible with Jupyterlab 3 and Jupyter Notebook 6 via a\n<a href=\"https://jupyterlab.readthedocs.io/en/stable/extension/extension_dev.html#prebuilt-extensions\">prebuilt extension</a>.\nTo use it, simply install <code>perspective-python</code> and the extensions should be\navailable.</p>\n\n<p><code>perspective-python</code>'s JupyterLab extension also provides convenient builtin\nviewers for <code>csv</code>, <code>json</code>, or <code>arrow</code> files. Simply right-click on a file with\nthis extension and choose the appropriate <code>Perpective</code> option from the context\nmenu.</p>\n\n<h2 id=\"perspectivewidget\"><code>PerspectiveWidget</code></h2>\n\n<p>Building on top of the API provided by <code>perspective.Table</code>, the\n<code>PerspectiveWidget</code> is a JupyterLab plugin that offers the entire functionality\nof Perspective within the Jupyter environment. It supports the same API\nsemantics of <code>&lt;perspective-viewer&gt;</code>, along with the additional data types\nsupported by <code>perspective.Table</code>. <code>PerspectiveWidget</code> takes keyword arguments\nfor the managed <code>View</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">perspective.widget</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">PerspectiveWidget</span>\n<span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">perspective</span><span class=\"o\">.</span><span class=\"n\">PerspectiveWidget</span><span class=\"p\">(</span>\n    <span class=\"n\">data</span><span class=\"p\">,</span>\n    <span class=\"n\">plugin</span><span class=\"o\">=</span><span class=\"s2\">&quot;X Bar&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">aggregates</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;datetime&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;any&quot;</span><span class=\"p\">},</span>\n    <span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s2\">&quot;date&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;desc&quot;</span><span class=\"p\">]]</span>\n<span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<h3 id=\"creating-a-widget\">Creating a widget</h3>\n\n<p>A widget is created through the <code>PerspectiveWidget</code> constructor, which takes as\nits first, required parameter a <code>perspective.Table</code>, a dataset, a schema, or\n<code>None</code>, which serves as a special value that tells the Widget to defer loading\nany data until later. In maintaining consistency with the Javascript API,\nWidgets cannot be created with empty dictionaries or lists\u2014<code>None</code> should be used\nif the intention is to await data for loading later on. A widget can be\nconstructed from a dataset:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">perspective.widget</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">PerspectiveWidget</span>\n<span class=\"n\">PerspectiveWidget</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">group_by</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;date&quot;</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n\n<p>.. or a schema:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">PerspectiveWidget</span><span class=\"p\">({</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"s2\">&quot;b&quot;</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">})</span>\n</code></pre>\n</div>\n\n<p>.. or an instance of a <code>perspective.Table</code>:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">perspective</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">PerspectiveWidget</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n"}, {"fullname": "perspective.widget.PerspectiveWidget", "modulename": "perspective.widget", "qualname": "PerspectiveWidget", "kind": "class", "doc": "<p><code>PerspectiveWidget</code> allows for Perspective to be used as a Jupyter\nwidget.</p>\n\n<p>Using <code>perspective.Table</code>, you can create a widget that extends the full\nfunctionality of <code>perspective-viewer</code>.  Changes on the viewer can be\nprogramatically set on the <code>PerspectiveWidget</code> instance.</p>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span><span class=\"w\"> </span><span class=\"nn\">perspective.widget</span><span class=\"w\"> </span><span class=\"kn\">import</span> <span class=\"n\">PerspectiveWidget</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">&quot;a&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>    <span class=\"s2\">&quot;b&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;2019/07/11 7:30PM&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;2019/07/11 8:30PM&quot;</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>        <span class=\"s2\">&quot;2019/07/11 9:30PM&quot;</span>\n<span class=\"gp\">... </span>    <span class=\"p\">]</span>\n<span class=\"gp\">... </span><span class=\"p\">}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">widget</span> <span class=\"o\">=</span> <span class=\"n\">PerspectiveWidget</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"n\">data</span><span class=\"p\">,</span>\n<span class=\"gp\">... </span>    <span class=\"n\">group_by</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>    <span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s2\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;desc&quot;</span><span class=\"p\">]],</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&gt;&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]]</span>\n<span class=\"gp\">... </span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">sort</span>\n<span class=\"go\">[[&quot;b&quot;, &quot;desc&quot;]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">sort</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">([</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;asc&quot;</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">sort</span>\n<span class=\"go\">[[&quot;b&quot;, &quot;desc&quot;], [&quot;a&quot;, &quot;asc&quot;]]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">widget</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]})</span> <span class=\"c1\"># Browser UI updates</span>\n</code></pre>\n</div>\n", "bases": "ipywidgets.widgets.domwidget.DOMWidget, perspective.widget.viewer.viewer.PerspectiveViewer"}, {"fullname": "perspective.widget.PerspectiveWidget.__init__", "modulename": "perspective.widget", "qualname": "PerspectiveWidget.__init__", "kind": "function", "doc": "<p>Initialize an instance of <code>PerspectiveWidget</code>\nwith the given table/data and viewer configuration.</p>\n\n<p>If an <code>AsyncTable</code> is passed in, then certain widget methods like\n<code>update()</code> and <code>delete()</code> return coroutines which must be awaited.</p>\n\n<h1 id=\"arguments\">Arguments</h1>\n\n<ul>\n<li><code>data</code> (<code>Table</code>|<code>AsyncTable</code>|<code>dict</code>|<code>list</code>|<code>pandas.DataFrame</code>|<code>bytes</code>|<code>str</code>): a\n<code>perspective.Table</code> instance, a <code>perspective.AsyncTable</code> instance, or\na dataset to be loaded in the widget.</li>\n</ul>\n\n<h1 id=\"keyword-arguments\">Keyword Arguments</h1>\n\n<ul>\n<li><code>index</code> (<code>str</code>): A column name to be used as the primary key.\nIgnored if <code>server</code> is True.</li>\n<li><code>binding_mode</code> (<code>str</code>): \"client-server\" or \"server\"</li>\n<li><code>limit</code> (<code>int</code>): A upper limit on the number of rows in the Table.\nCannot be set at the same time as <code>index</code>, ignored if <code>server</code>\nis True.</li>\n<li><code>kwargs</code> (<code>dict</code>): configuration options for the <code>PerspectiveViewer</code>,\nand <code>Table</code> constructor if <code>data</code> is a dataset.</li>\n</ul>\n\n<h1 id=\"examples\">Examples</h1>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">widget</span> <span class=\"o\">=</span> <span class=\"n\">PerspectiveWidget</span><span class=\"p\">(</span>\n<span class=\"gp\">... </span>    <span class=\"p\">{</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]},</span>\n<span class=\"gp\">... </span>    <span class=\"n\">aggregates</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">:</span> <span class=\"s2\">&quot;avg&quot;</span><span class=\"p\">},</span>\n<span class=\"gp\">... </span>    <span class=\"n\">group_by</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">],</span>\n<span class=\"gp\">... </span>    <span class=\"n\">sort</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s2\">&quot;b&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;desc&quot;</span><span class=\"p\">]],</span>\n<span class=\"gp\">... </span>    <span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"p\">[[</span><span class=\"s2\">&quot;a&quot;</span><span class=\"p\">,</span> <span class=\"s2\">&quot;&gt;&quot;</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">]],</span>\n<span class=\"gp\">... </span>    <span class=\"n\">expressions</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">&quot;&quot;</span><span class=\"n\">a</span><span class=\"s2\">&quot; + 100&quot;</span><span class=\"p\">])</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">index</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">binding_mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;server&#39;</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "perspective.widget.PerspectiveWidget.binding_mode", "modulename": "perspective.widget", "qualname": "PerspectiveWidget.binding_mode", "kind": "variable", "doc": "<p>An enum whose value must be in a given sequence.</p>\n"}, {"fullname": "perspective.widget.PerspectiveWidget.load", "modulename": "perspective.widget", "qualname": "PerspectiveWidget.load", "kind": "function", "doc": "<p>Load the widget with data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">options</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.widget.PerspectiveWidget.update", "modulename": "perspective.widget", "qualname": "PerspectiveWidget.update", "kind": "function", "doc": "<p>Update the widget with new data.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.widget.PerspectiveWidget.clear", "modulename": "perspective.widget", "qualname": "PerspectiveWidget.clear", "kind": "function", "doc": "<p>Clears the widget's underlying <code>Table</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.widget.PerspectiveWidget.replace", "modulename": "perspective.widget", "qualname": "PerspectiveWidget.replace", "kind": "function", "doc": "<p>Replaces the widget's <code>Table</code> with new data conforming to the same\nschema. Does not clear user-set state. If in client mode, serializes\nthe data and sends it to the browser.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.widget.PerspectiveWidget.delete", "modulename": "perspective.widget", "qualname": "PerspectiveWidget.delete", "kind": "function", "doc": "<p>Delete the Widget's data and clears its internal state.</p>\n\n<h1 id=\"arguments\">Arguments</h1>\n\n<ul>\n<li><code>delete_table</code> (<code>bool</code>): whether the underlying <code>Table</code> will be\ndeleted. Defaults to True.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">delete_table</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "perspective.widget.PerspectiveWidget.handle_message", "modulename": "perspective.widget", "qualname": "PerspectiveWidget.handle_message", "kind": "function", "doc": "<p>Given a message from <code>PerspectiveJupyterClient.send</code>, process the\nmessage and return the result to <code>self.post</code>.</p>\n\n<h1 id=\"arguments\">Arguments</h1>\n\n<ul>\n<li><code>widget</code>: a reference to the <code>Widget</code> instance that received the\nmessage.</li>\n<li><code>content</code> (dict): - the message from the front-end. Automatically\nde-serialized by ipywidgets.</li>\n<li><code>buffers</code>: optional arraybuffers from the front-end, if any.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();